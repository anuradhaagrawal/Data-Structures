import java.util.*;

  /*

    this program returns the boolean.
    Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
    https://leetcode.com/problems/two-sum/

    */

class Main {
    public  int[] twoSum(int[] nums, int targ et) {
        
       Map<Integer, Integer> map = new HashMap<>();
        System.out.println ("contents are - " + nums.length);
        for (int i= 0; i < nums.length; i++)
        {
            int complement = target - nums[i];
            if (map.containsKey(complement)) {
                return new int[] {map.get(complement), i};
            }
            else
                map.put(nums[i],i);
                
        }
         return new int[]{};
        
    }
    
    /*

    this program returns the boolean.
    */

     public  boolean twoSumExist(int[] nums, int target) {
        
       HashSet<Integer> map = new HashSet<>();
        System.out.println ("contents are - " + nums.length);
        for (int i= 0; i < nums.length; i++)
        {
            int complement = target - nums[i];
            if (map.contains(nums[i])) {
                return true;
            }
            else
                map.add(complement);
                
        }
        return false;
        
    }
    
    public static void main(String[] args){
        
        Main test = new Main();
        
        int[] inputArray = new int[]{1,2,3,4,5,6};
        
        System.out.println(" Hello World" + Arrays.toString(test.twoSum(inputArray , 12)));
        System.out.println(" Hello World" + test.twoSumExist(inputArray , 12));
        
    }
}
